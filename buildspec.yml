version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11   # Needed for CodeBuild; don't use docker here
    commands:
      - echo "Using pre-installed AWS CLI and curl on Amazon Linux 2023"
      
      # Install jq (lightweight JSON processor)
      - yum install -y jq

      # Install kubectl (latest stable)
      - echo "Installing kubectl..."
      - KUBECTL_VERSION=$(curl -s https://dl.k8s.io/release/stable.txt)
      - curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
      - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - kubectl version --client

  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - $(aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPO_URI)

  build:
    commands:
      - echo "Building Docker image..."
      - docker build -t $REPO_URI:$IMAGE_TAG .
      - docker push $REPO_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Updating kubeconfig..."
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME

      - echo "Deploying to Kubernetes..."
      - sed -i "s|REPLACE_IMAGE|$REPO_URI:$IMAGE_TAG|g" $K8S_DIR/deployment.yml
      - kubectl apply -f $K8S_DIR/deployment.yml
      - kubectl rollout status deployment/$DEPLOYMENT_NAME -n $K8S_NAMESPACE
      - kubectl get svc -n $K8S_NAMESPACE -o wide

artifacts:
  files:
    - k8s/*
